{"version":3,"sources":["components/StarWars.js","components/StarWarList.js","components/pagination.js","components/Search.js","App.js","index.js"],"names":["StarWars","item","Col","xs","lg","style","margin","Card","border","width","height","Header","Title","name","Body","Fragment","Row","Text","gender","birth_year","mass","hair_color","StarWarList","currentPage","totalRecords","data","map","e","i","key","length","className","maxWidth","LEFT_PAGE","Pagination","pageLimit","next","previous","fetchPeople","useState","pages","setPages","useEffect","totalPages","Math","ceil","totalNumbers","startPage","max","endPage","min","range","hasLeftSpill","hasRightSpill","spillOffset","fetchPageNumbers","aria-label","page","index","to","onClick","aria-hidden","from","step","items","push","Search","updateInputValue","submitSearchValue","history","onSubmit","preventDefault","InputGroup","FormControl","placeholder","type","onChange","evt","Append","Button","variant","paramId","Child","id","useParams","console","log","App","props","people","setPeople","search","setSearch","nextPage","setNextPage","previousPage","setPreviousPage","setCurrentPage","loading","setLoading","setTotalRecords","useHistory","location","useLocation","match","useRouteMatch","pathname","matchId","setMatchId","handle_fetchPeople","payload","a","fetch","res","json","count","results","params","URL","searchParams","get","paramsPrev","Container","target","value","Number","fetchBooks","path","children","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9be78e86.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, Col, Row } from 'react-bootstrap';\n\nconst StarWars = ({ item }) => (\n  <Col xs=\"12\" lg=\"6\" style={{ margin: '15px 0' }}>\n    <Card border=\"primary\" style={{ width: '100%', height: '100%' }}>\n      <Card.Header><Card.Title>{item.name}</Card.Title></Card.Header>\n      <Card.Body>\n        <React.Fragment>\n          <Row>\n            <Col>\n              <Card.Text>\n                <strong>\n                  Gender:\n              </strong>\n              </Card.Text>\n            </Col>\n            <Col>\n              <Card.Text>\n                {item.gender}\n              </Card.Text>\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <Card.Text>\n                <strong>\n                  Birth year\n            </strong>\n              </Card.Text>\n            </Col>\n            <Col>\n              <Card.Text>\n                {item.birth_year}\n              </Card.Text>\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <Card.Text>\n                <strong>\n                  Height\n          </strong>\n              </Card.Text>\n            </Col>\n            <Col>\n              <Card.Text>\n                {item.height}\n              </Card.Text>\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <Card.Text>\n                <strong>\n                  Mass\n          </strong>\n              </Card.Text>\n            </Col>\n            <Col>\n              <Card.Text>\n                {item.mass}\n              </Card.Text>\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <Card.Text>\n                <strong>\n                  Hair color\n          </strong>\n              </Card.Text>\n            </Col>\n            <Col>\n              <Card.Text>\n                {item.hair_color}\n              </Card.Text>\n            </Col>\n          </Row>\n        </React.Fragment>\n      </Card.Body>\n    </Card>\n  </Col>\n);\n\nStarWars.propTypes = {\n  item: PropTypes.object,\n};\n\nexport default StarWars;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Col, Row } from 'react-bootstrap';\nimport StarWars from './StarWars';\n\n\nfunction StarWarList({ currentPage, totalRecords, data }) {\n\n  return (\n    data &&\n    <React.Fragment>\n      {totalRecords > 0 &&\n        <Row style={{ margin: '10px 0px 10px 0px' }}>\n          Page: {currentPage}\n        </Row>\n      }\n      <Row>\n        {data && data.map((e, i) => (\n          <StarWars item={e} key={i} />\n        ))}\n        {data && data.length === 0 &&\n          <Col lg=\"12\" style={{ margin: '15px 0' }} className=\"text-center\">\n            <div style={{ maxWidth: '400px', width: '100%' }}>No result found...</div>\n          </Col>\n        }\n      </Row>\n    </React.Fragment>\n  );\n}\n\nexport default StarWarList;\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport userEvent from '@testing-library/user-event';\n\nconst LEFT_PAGE = 'LEFT';\nconst RIGHT_PAGE = 'RIGHT';\n\n\nexport default function Pagination({ totalRecords, pageLimit, next, previous, fetchPeople, currentPage }) {\n  const [pages, setPages] = useState(null);\n  useEffect(() => {\n    setPages(fetchPageNumbers(pageLimit, totalRecords, currentPage));\n  }, [next, previous]);\n  return (\n    <nav aria-label=\" Pagination\" className=\"float-lg-right\">\n      <ul className=\"pagination\">\n\n        {pages && pages.map((page, index) => {\n          if (page === LEFT_PAGE) return (\n            <li key={index} className=\"page-item\">\n              <Link\n                to={`/page/${currentPage - 1}`}\n                className=\"page-link\"\n                aria-label=\"Previous\"\n                onClick={() => fetchPeople({ currentPage: currentPage - 1 })}\n              >\n                <span aria-hidden=\"true\">&laquo;</span>\n                <span className=\"sr-only\">Previous</span>\n              </Link>\n            </li>\n          )\n          if (page === RIGHT_PAGE) return (\n            <li key={index} className=\"page-item\">\n              <Link\n                to={`/page/${currentPage + 1}`}\n                className=\"page-link\"\n                aria-label=\"Next\"\n                onClick={() => fetchPeople({ currentPage: currentPage + 1 })}\n              >\n                <span aria-hidden=\"true\">&raquo;</span>\n                <span className=\"sr-only\">Next</span>\n              </Link>\n            </li>\n          )\n          return (\n            <li key={index} className={`page-item${currentPage === page ? ' active' : ''}`}>\n              <Link\n                className=\"page-link\"\n                // onClick={() => fetchBooks({ currentPage: page })}\n                onClick={() => fetchPeople({ currentPage: page })}\n                to={page === 1 ? '/' : `/page/${page}`}\n              >\n                {page}\n              </Link>\n            </li>\n          )\n\n        })}\n      </ul>\n    </nav>\n  );\n}\n\nfunction range(from, to, step = 1) {\n  let i = from;\n  const items = [];\n\n  while (i <= to) {\n    items.push(i);\n    i += step;\n  }\n  return items;\n};\n\nfunction fetchPageNumbers(pageLimit, totalRecords, currentPage) {\n\n  const totalPages = Math.ceil(totalRecords / pageLimit);\n\n  /**\n   * totalNumbers: the total page numbers to show on the control\n   * totalBlocks: totalNumbers + 2 to cover for the left(<) and right(>) controls\n   */\n  const totalNumbers = 7;\n  const totalBlocks = totalNumbers + 2;\n\n  if (totalPages > totalBlocks) {\n    const startPage = Math.max(2, currentPage - 2);\n    const endPage = Math.min(totalPages - 1, currentPage + 2);\n\n    let pages = range(startPage, endPage);\n\n    /**\n     * hasLeftSpill: has hidden pages to the left\n     * hasRightSpill: has hidden pages to the right\n     * spillOffset: number of hidden pages either to the left or to the right\n     */\n    const hasLeftSpill = startPage > 2;\n    const hasRightSpill = (totalPages - endPage) > 1;\n    const spillOffset = totalNumbers - (pages.length + 1);\n\n    if (hasLeftSpill && !hasRightSpill) {\n      pages = [LEFT_PAGE, ...range(startPage - spillOffset, startPage - 1), ...pages];\n    } else if (!hasLeftSpill && hasRightSpill) {\n      pages = [...pages, ...range(endPage + 1, endPage + spillOffset), RIGHT_PAGE];\n    } else {\n      pages = [LEFT_PAGE, ...pages, RIGHT_PAGE];\n    }\n\n    return [1, ...pages, totalPages];\n  }\n  return range(1, totalPages);\n};","import React from 'react';\nimport { InputGroup, FormControl, Button } from 'react-bootstrap';\n\nfunction Search ({ updateInputValue, submitSearchValue, history }){\n//console.log(updateInputValue);\n\nreturn(\n  <form\n    onSubmit={(e) => {\n      e.preventDefault();\n      history.push('/');\n      submitSearchValue({ currentPage: 1 });\n    }}\n  >\n    <InputGroup className=\"mb-3\">\n      <FormControl\n        placeholder=\"Search by name\"\n        type=\"text\"\n        onChange={evt => updateInputValue(evt)}\n      />\n      <InputGroup.Append>\n        <Button\n          variant=\"outline-secondary\"\n          type=\"submit\"\n        >\n          Search\n        </Button>\n      </InputGroup.Append>\n    </InputGroup>\n  </form>\n)\n}\n\nexport default Search;\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Col, Container, Row } from 'react-bootstrap';\nimport StarWarList from './components/StarWarList';\nimport Pagination from './components/pagination';\nimport Search from './components/Search';\nimport { useHistory, useLocation, useRouteMatch } from \"react-router-dom\";\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  useParams\n} from \"react-router-dom\";\nlet paramId = 1;\nfunction App(props) {\n  const [people, setPeople] = useState([]);\n  const [search, setSearch] = useState('');\n  const [nextPage, setNextPage] = useState(0);\n  const [previousPage, setPreviousPage] = useState(0);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [loading, setLoading] = useState(true);\n  const [totalRecords, setTotalRecords] = useState(0);\n  let history = useHistory();\n  const location = useLocation();\n\n  const match = useRouteMatch(location.pathname !== '/' ? '/page/:id' : '/');\n  const [matchId, setMatchId] = useState(\"1\");\n  const itemsPerPage = 10;\n\n  useEffect(() => {\n    async function fetchPeople() {\n      setLoading(true);\n      let res = await fetch(`https://swapi.dev/api/people/?format=json&page=${paramId}`);\n      let data = await res.json();\n      setTotalRecords(data.count);\n      setPeople(data.results);\n      let params = data && data.next ? new URL(data.next).searchParams : null;\n      setNextPage(params ? params.get('page') : null);\n      let paramsPrev = data && data.previous ? new URL(data.previous).searchParams : null;\n      setPreviousPage(paramsPrev ? paramsPrev.get('page') : null)\n      setCurrentPage(paramId);\n      setMatchId(match.params.id ? match.params.id : 1);\n      setLoading(false);\n      history.push(location.pathname !== '/' ? `/page/${matchId}` : '/');\n    }\n    fetchPeople();\n  }, []);\n\n  const handle_updateInputValue = (evt) => {\n    setSearch(evt.target.value);\n  };\n\n  async function handle_fetchPeople(payload) {\n    setLoading(true);\n    const page = payload ? payload.currentPage : currentPage;\n    let res = await fetch(`https://swapi.dev/api/people/?format=json&page=${page}&search=${search}`);\n    let data = await res.json();\n\n    setTotalRecords(data.count);\n    setPeople(data.results);\n    let params = data && data.next ? new URL(data.next).searchParams : null;\n    setNextPage(params ? params.get('page') : null);\n    let paramsPrev = data && data.previous ? new URL(data.previous).searchParams : null;\n    setPreviousPage(paramsPrev ? paramsPrev.get('page') : null);\n    setCurrentPage(payload.currentPage ? payload.currentPage : currentPage);\n    setLoading(false);\n    history.push(`/page/${page}`);\n  }\n\n  return (\n    <div className=\"App\">\n      {loading &&\n        <div className=\"loader\">\n        </div>\n      }\n\n      <Router>\n        <Container>\n          <Row>\n            <Col xs=\"12\" lg=\"6\" style={{ margin: '15px 0' }}>\n              <Search\n                updateInputValue={handle_updateInputValue}\n                submitSearchValue={handle_fetchPeople}\n                history={history}\n              />\n            </Col>\n            <Col xs=\"12\" lg=\"6\" style={{ margin: '15px 0' }}>\n\n              {people &&\n                <Pagination\n                  totalRecords={totalRecords}\n                  pageLimit={itemsPerPage}\n                  next={Number(nextPage) || 0}\n                  previous={Number(previousPage) || 0}\n                  fetchPeople={handle_fetchPeople}\n                  currentPage={Number(currentPage) || 1}\n                  history={history}\n                />\n              }\n            </Col>\n          </Row>\n          <StarWarList\n            currentPage={currentPage}\n            totalRecords={totalRecords}\n            data={people}\n            fetchBooks={people}\n            match={match}\n            location={location}\n          />\n          <Switch>\n            <Route path=\"/page/:id\" children={<Child />} />\n          </Switch>\n        </Container>\n      </Router>\n    </div>\n  );\n}\nfunction Child() {\n  // We can use the `useParams` hook here to access\n  // the dynamic pieces of the URL.\n  let { id } = useParams();\n  console.log(\"id\", id);\n  paramId = id > 0 ? id : 1;\n  return (\n    <div>\n      {/* <h3>ID: {id}</h3> */}\n    </div>\n  );\n}\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport App from './App';\nimport './theme/custom_bootstrap.scss';\nReactDOM.render((\n<React.StrictMode>\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>\n</React.StrictMode> \n), document.getElementById('root'));\n"],"sourceRoot":""}